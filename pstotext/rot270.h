
RCDATA 2
BEGIN
  "% Copyright (C) 1995, Digital Equipment Corporation.\012"
  "% All rights reserved.\012"
  "% See the file pstotext.txt for a full description.\012"
  "%\012"
  "% Lectern:\012"
  "%   PostScript to be prepended to a job to rotate its images by //angle,\012"
  "%   adjusting the page shape appropriately.  This works only for\012"
  "%   devices (such as ppmraw) that allow arbitrary imaging areas.\012"
  "\012"
  "% Last modified on Thu Aug  1 11:36:13 PDT 1996 by mcjones\012"
  "%      modified on Tue Mar 14 14:54:44 PST 1995 by birrell\012"
  "\012"
  "4 dict begin\012"
  "/myDict currentdict def\012"
  "/angle 270 def\012"
  "\012"
  "/languagelevel where { pop languagelevel 2 ge } { FALSE } ifelse \012"
  "  {\012"
  "  % Use setpagedevice for level 2 implementations\012"
  "  /lastW 0 def\012"
  "  /lastH 0 def\012"
  "  <<\012"
  "    /BeginPage {\012"
  "      //myDict begin\012"
  "      pop % page number\012"
  "      currentpagedevice /PageSize get aload pop % stack: W H\012"
  "%      (H = ) print dup =\012"
  "%      (W = ) print 1 index = flush\012"
  "%      (lastH = ) print lastH =\012"
  "%      (lastW = ) print lastW = flush\012"
  "      lastH ne exch lastW ne or {\012"
  "        % /PageSize has changed: rotate it\012"
  "        <<\012"
  "          /PageSize [\012"
  "            currentpagedevice /PageSize get aload pop % stack: W H\012"
  "            exch % stack: newW newH\012"
  "            /lastW 2 index def\012"
  "            /lastH 1 index def\012"
  "            ]\012"
  "          >> setpagedevice % calls BeginPage recursively\012"
  "%        (H := ) print lastH =\012"
  "%        (W := ) print lastW = flush\012"
  "        } {\012"
  "        % Rotate ctm.  Don't do this if we're also adjusting PageSize,\012"
  "        % because that causes another BeginPage call, which does this.\012"
  "        currentpagedevice /PageSize get aload pop % stack: width height\012"
  "        2 div exch 2 div exch % stack: center\012"
  "        2 copy translate //angle rotate neg exch neg translate\012"
  "        } ifelse\012"
  "      end % //myDict\012"
  "      }\012"
  "    >> setpagedevice\012"
  "  } {\012"
  "  % Use ghostscript specific code for earlier systems\012"
  "  % flip current frame buffer\012"
  "    currentdevice getdeviceprops >> /HWSize get\012"
  "    aload pop exch 2 array astore\012"
  "    mark exch /HWSize exch currentdevice putdeviceprops pop\012"
  "  % fix showpage to add a rotation and translation\012"
  "    /adbFixup {\012"
  "        currentdevice getdeviceprops >>\012"
  "        dup /HWSize get aload pop 3 -1 roll\012"
  "        /HWResolution get aload pop\012"
  "        % stack: xsize ysize xres yres\012"
  "        exch 4 -1 roll exch div 72 mul\012"
  "        % stack: ysize yres xpts\012"
  "        3 1 roll div 72 mul\012"
  "        % stack: xpts ypts\012"
  "        2 div exch 2 div exch\012"
  "        2 copy translate //angle rotate neg exch neg translate\012"
  "        } bind odef\012"
  "    /adbShowpage /showpage load def\012"
  "    userdict begin /showpage { adbShowpage adbFixup } bind odef end\012"
  "    adbFixup\012"
  "  % define new \042.setpagesize\042 that flips its arguments\012"
  "    statusdict begin\012"
  "        /adbSet /.setpagesize load def\012"
  "        /.setpagesize {\012"
  "          exch adbSet adbFixup\012"
  "          } bind def\012"
  "        end\012"
  "  } ifelse\012"
  "\012"
  "end % //myDict\012"
  "\0\0"
END

